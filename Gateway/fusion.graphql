schema
  @fusion(version: 1)
  @transport(subgraph: "users", group: "Fusion", location: "http:\/\/localhost:1001\/graphql", kind: "HTTP")
  @transport(subgraph: "files", group: "Fusion", location: "http:\/\/localhost:1002\/graphql", kind: "HTTP") {
  query: Query
  mutation: Mutation
}

type Query {
  fileById(id: UUID!): FileEntity
    @variable(subgraph: "files", name: "id", argument: "id")
    @resolver(subgraph: "files", select: "{ fileById(id: $id) }", arguments: [ { name: "id", type: "UUID!" } ])
  files: [FileEntity!]!
    @resolver(subgraph: "files", select: "{ files }")
  userById(id: UUID!): UserEntity
    @variable(subgraph: "users", name: "id", argument: "id")
    @resolver(subgraph: "users", select: "{ userById(id: $id) }", arguments: [ { name: "id", type: "UUID!" } ])
  users: [UserEntity!]!
    @resolver(subgraph: "users", select: "{ users }")
}

type Mutation {
  createFile(input: CreateFileInput!): FileEntity!
    @variable(subgraph: "files", name: "input", argument: "input")
    @resolver(subgraph: "files", select: "{ createFile(input: $input) }", arguments: [ { name: "input", type: "CreateFileInput!" } ])
  createUser(input: CreateUserInput!): UserEntity!
    @variable(subgraph: "users", name: "input", argument: "input")
    @resolver(subgraph: "users", select: "{ createUser(input: $input) }", arguments: [ { name: "input", type: "CreateUserInput!" } ])
  deleteFile(id: UUID!): FileEntity!
    @variable(subgraph: "files", name: "id", argument: "id")
    @resolver(subgraph: "files", select: "{ deleteFile(id: $id) }", arguments: [ { name: "id", type: "UUID!" } ])
  deleteUser(id: UUID!): UserEntity!
    @variable(subgraph: "users", name: "id", argument: "id")
    @resolver(subgraph: "users", select: "{ deleteUser(id: $id) }", arguments: [ { name: "id", type: "UUID!" } ])
  updateFile(input: UpdateFileInput!): FileEntity!
    @variable(subgraph: "files", name: "input", argument: "input")
    @resolver(subgraph: "files", select: "{ updateFile(input: $input) }", arguments: [ { name: "input", type: "UpdateFileInput!" } ])
  updateUser(input: UpdateUserInput!): UserEntity!
    @variable(subgraph: "users", name: "input", argument: "input")
    @resolver(subgraph: "users", select: "{ updateUser(input: $input) }", arguments: [ { name: "input", type: "UpdateUserInput!" } ])
}

type FileEntity {
  blob: [Byte!]!
    @source(subgraph: "files")
  id: UUID!
    @source(subgraph: "files")
  name: String!
    @source(subgraph: "files")
  sign: UpperCaseStringType!
    @source(subgraph: "files")
  userId: UUID!
    @source(subgraph: "files")
}

type UserEntity {
  id: UUID!
    @source(subgraph: "users")
  name: String!
    @source(subgraph: "users")
  sex: Sex!
    @source(subgraph: "users")
}

input CreateFileInput {
  blob: Upload!
  name: String!
  sign: UpperCaseStringType!
  userId: UUID!
}

input CreateUserInput {
  name: String!
  sex: Sex!
}

input UpdateFileInput {
  id: UUID!
  name: String
}

input UpdateUserInput {
  id: UUID!
  name: String
  sex: Sex!
}

enum Sex {
  FEMALE
    @source(subgraph: "users")
  MALE
    @source(subgraph: "users")
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `Upload` scalar type represents a file upload."
scalar Upload

scalar UpperCaseStringType

scalar UUID